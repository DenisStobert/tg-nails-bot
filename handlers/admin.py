import aiosqlite
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from config import DB_PATH, ADMIN_ID

router = Router()


@router.message(Command("admin"))
async def admin_menu(message: Message):
    """–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    
    await message.answer(
        "üîß *–ú–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞:*\n\n"
        "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏:*\n"
        "‚Ä¢ /addslot YYYY-MM-DD HH:MM ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –æ–∫–Ω–æ\n"
        "‚Ä¢ /generate\\_slots ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è üÜï\n"
        "‚Ä¢ /slots ‚Äî —Å–ø–∏—Å–æ–∫ –æ–∫–æ–Ω\n"
        "‚Ä¢ /del\\_slot <id> ‚Äî —É–¥–∞–ª–∏—Ç—å –æ–∫–Ω–æ\n"
        "‚Ä¢ /free\\_slot <id> ‚Äî –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –æ–∫–Ω–æ\n\n"
        "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏:*\n"
        "‚Ä¢ /addservice <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ü–µ–Ω–∞> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É\n"
        "‚Ä¢ /delservice <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî —É–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É\n"
        "‚Ä¢ /setprice <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ü–µ–Ω–∞> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É\n\n"
        "*–ó–∞–ø–∏—Å–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        "‚Ä¢ /bookings ‚Äî –≤—Å–µ –∑–∞–ø–∏—Å–∏\n"
        "‚Ä¢ /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üÜï\n",
        parse_mode="Markdown"
    )


@router.message(Command("addslot"))
async def add_slot(message: Message):
    """–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç"""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

    parts = message.text.strip().split()
    if len(parts) < 3:
        return await message.answer("–§–æ—Ä–º–∞—Ç: /addslot 2025-10-10 14:00")

    dt_str = f"{parts[1]} {parts[2]}"
    try:
        dt = datetime.strptime(dt_str, "%Y-%m-%d %H:%M")
    except ValueError:
        return await message.answer("–î–∞—Ç–∞/–≤—Ä–µ–º—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã. –ü—Ä–∏–º–µ—Ä: 2025-10-10 14:00")

    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("INSERT INTO timeslots(dt) VALUES (?)", (dt.isoformat(),))
        await db.commit()

    await message.answer(f"‚úÖ –û–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {dt.strftime('%d.%m %H:%M')}")


@router.message(Command("generate_slots"))
async def generate_slots_start(message: Message):
    """–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ—Ç–æ–≤"""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ù–∞ –æ–¥–Ω—É –Ω–µ–¥–µ–ª—é", callback_data="gen_week")],
        [InlineKeyboardButton(text="üìÖ –ù–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏", callback_data="gen_2weeks")],
        [InlineKeyboardButton(text="üìÖ –ù–∞ –º–µ—Å—è—Ü", callback_data="gen_month")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="gen_custom")],
    ])
    
    await message.answer(
        "üïê *–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è*\n\n"
        "–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—Ç–æ–≤:",
        parse_mode="Markdown",
        reply_markup=kb
    )


@router.callback_query(F.data.startswith("gen_"))
async def generate_slots_period(call: CallbackQuery):
    """–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    period = call.data.split("_")[1]
    
    if period == "custom":
        await call.message.edit_text(
            "‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n"
            "/make\\_slots <–¥–Ω–µ–π> <—á–∞—Å—ã>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "`/make_slots 7 10:00,12:00,14:00,16:00,18:00`\n\n"
            "–≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç —Å–ª–æ—Ç—ã –Ω–∞ 7 –¥–Ω–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —á–∞—Å–∞–º–∏",
            parse_mode="Markdown"
        )
        await call.answer()
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    days = {"week": 7, "2weeks": 14, "month": 30}[period]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üïê 9:00 - 18:00 (–∫–∞–∂–¥—ã–π —á–∞—Å)", callback_data=f"gentime_{days}_work")],
        [InlineKeyboardButton(text="üïê 10:00 - 20:00 (–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞)", callback_data=f"gentime_{days}_long")],
        [InlineKeyboardButton(text="‚öôÔ∏è –°–≤–æ–∏ —á–∞—Å—ã", callback_data=f"gentime_{days}_custom")],
    ])
    
    await call.message.edit_text(
        f"üìÖ –ü–µ—Ä–∏–æ–¥: *{days} –¥–Ω–µ–π*\n\n"
        "–í—ã–±–µ—Ä–∏ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã:",
        parse_mode="Markdown",
        reply_markup=kb
    )
    await call.answer()


@router.callback_query(F.data.startswith("gentime_"))
async def generate_slots_time(call: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤"""
    parts = call.data.split("_")
    days = int(parts[1])
    time_type = parts[2]
    
    if time_type == "custom":
        await call.message.edit_text(
            "‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É:\n"
            f"`/make_slots {days} 10:00,12:00,14:00,16:00,18:00`\n\n"
            "–£–∫–∞–∂–∏ —Å–≤–æ–∏ —á–∞—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é",
            parse_mode="Markdown"
        )
        await call.answer()
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å—ã
    if time_type == "work":
        hours = list(range(9, 19))  # 9:00 - 18:00
    else:  # long
        hours = list(range(10, 21, 2))  # 10:00 - 20:00 –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã
    start_date = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1)
    created_count = 0
    
    async with aiosqlite.connect(DB_PATH) as db:
        for day_offset in range(days):
            current_date = start_date + timedelta(days=day_offset)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            # if current_date.weekday() >= 5:  # 5=—Å—É–±–±–æ—Ç–∞, 6=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            #     continue
            
            for hour in hours:
                slot_time = current_date.replace(hour=hour, minute=0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Å–ª–æ—Ç
                cur = await db.execute(
                    "SELECT id FROM timeslots WHERE dt=?",
                    (slot_time.isoformat(),)
                )
                if await cur.fetchone():
                    continue
                
                await db.execute(
                    "INSERT INTO timeslots(dt) VALUES (?)",
                    (slot_time.isoformat(),)
                )
                created_count += 1
        
        await db.commit()
    
    await call.message.edit_text(
        f"‚úÖ *–ì–æ—Ç–æ–≤–æ!*\n\n"
        f"–°–æ–∑–¥–∞–Ω–æ —Å–ª–æ—Ç–æ–≤: *{created_count}*\n"
        f"–ü–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π\n"
        f"–†–∞–±–æ—á–∏–µ —á–∞—Å—ã: {', '.join([f'{h}:00' for h in hours])}",
        parse_mode="Markdown"
    )
    await call.answer()


@router.message(Command("make_slots"))
async def make_slots_custom(message: Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    
    parts = message.text.strip().split(maxsplit=2)
    if len(parts) < 3:
        return await message.answer(
            "–§–æ—Ä–º–∞—Ç: /make\\_slots <–¥–Ω–µ–π> <—á–∞—Å—ã>\n"
            "–ü—Ä–∏–º–µ—Ä: `/make_slots 7 10:00,12:00,14:00,16:00`",
            parse_mode="Markdown"
        )
    
    try:
        days = int(parts[1])
        hours_str = parts[2].split(",")
        hours = []
        
        for h in hours_str:
            h = h.strip()
            hour, minute = map(int, h.split(":"))
            hours.append((hour, minute))
    except Exception:
        return await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å –∫–æ–º–∞–Ω–¥—É.")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã
    start_date = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1)
    created_count = 0
    
    async with aiosqlite.connect(DB_PATH) as db:
        for day_offset in range(days):
            current_date = start_date + timedelta(days=day_offset)
            
            for hour, minute in hours:
                slot_time = current_date.replace(hour=hour, minute=minute)
                
                cur = await db.execute(
                    "SELECT id FROM timeslots WHERE dt=?",
                    (slot_time.isoformat(),)
                )
                if await cur.fetchone():
                    continue
                
                await db.execute(
                    "INSERT INTO timeslots(dt) VALUES (?)",
                    (slot_time.isoformat(),)
                )
                created_count += 1
        
        await db.commit()
    
    await message.answer(
        f"‚úÖ *–ì–æ—Ç–æ–≤–æ!*\n\n"
        f"–°–æ–∑–¥–∞–Ω–æ —Å–ª–æ—Ç–æ–≤: *{created_count}*\n"
        f"–ü–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π",
        parse_mode="Markdown"
    )


@router.message(Command("slots"))
async def list_slots(message: Message):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤"""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "SELECT id, dt, is_booked FROM timeslots ORDER BY dt LIMIT 30"
        )
        rows = await cur.fetchall()

    if not rows:
        return await message.answer("–û–∫–æ–Ω –ø–æ–∫–∞ –Ω–µ—Ç.")

    text = "*–û–∫–Ω–∞ (–ø–µ—Ä–≤—ã–µ 30):*\n"
    for sid, dt_str, is_booked in rows:
        mark = "üî¥ –∑–∞–Ω—è—Ç–æ" if is_booked else "üü¢ —Å–≤–æ–±–æ–¥–Ω–æ"
        text += f"‚Ä¢ #{sid} {datetime.fromisoformat(dt_str).strftime('%d.%m %H:%M')} ‚Äî {mark}\n"
    await message.answer(text, parse_mode="Markdown")


@router.message(Command("del_slot"))
async def delete_slot(message: Message):
    """–£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç"""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

    parts = message.text.strip().split()
    if len(parts) < 2:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /del_slot <id>")

    slot_id = parts[1]
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM timeslots WHERE id=?", (slot_id,))
        await db.commit()
    await message.answer(f"‚úÖ –û–∫–Ω–æ #{slot_id} —É–¥–∞–ª–µ–Ω–æ")


@router.message(Command("free_slot"))
async def free_slot(message: Message):
    """–û—Å–≤–æ–±–æ–¥–∏—Ç—å –∑–∞–Ω—è—Ç—ã–π —Å–ª–æ—Ç"""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

    parts = message.text.strip().split()
    if len(parts) < 2:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /free_slot <id>")

    slot_id = parts[1]
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE timeslots SET is_booked=0, booked_by_user_id=NULL WHERE id=?",
            (slot_id,)
        )
        await db.commit()
    await message.answer(f"‚úÖ –û–∫–Ω–æ #{slot_id} —Ç–µ–ø–µ—Ä—å —Å–≤–æ–±–æ–¥–Ω–æ")


@router.message(Command("setprice"))
async def set_price(message: Message):
    """–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É —É—Å–ª—É–≥–∏"""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

    parts = message.text.strip().split(maxsplit=2)
    if len(parts) < 3:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /setprice <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ü–µ–Ω–∞>")

    name = parts[1]
    try:
        price = int(parts[2])
    except ValueError:
        return await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "UPDATE services SET price=? WHERE LOWER(name)=LOWER(?)",
            (price, name)
        )
        await db.commit()

        if cur.rowcount == 0:
            return await message.answer(f"–£—Å–ª—É–≥–∞ '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚ùå")

    await message.answer(f"‚úÖ –¶–µ–Ω–∞ –¥–ª—è ¬´{name}¬ª –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {price} ‚ÇΩ")


@router.message(Command("bookings"))
async def list_bookings(message: Message):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π"""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("""
            SELECT b.id, t.dt, u.name, u.phone, b.total_price
            FROM bookings b
            JOIN timeslots t ON t.id = b.timeslot_id
            JOIN users u ON u.id = b.user_id
            ORDER BY t.dt DESC
            LIMIT 20
        """)
        rows = await cur.fetchall()

    if not rows:
        return await message.answer("–ü–æ–∫–∞ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")

    text = "*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:*\n\n"
    for bid, dt_str, name, phone, price in rows:
        dt = datetime.fromisoformat(dt_str).strftime("%d.%m %H:%M")
        phone_str = f" | {phone}" if phone else ""
        text += f"‚Ä¢ {dt} ‚Äî {name}{phone_str}\n  üí∞ {price} ‚ÇΩ (#{bid})\n\n"

    await message.answer(text, parse_mode="Markdown")


@router.message(Command("addservice"))
async def add_service(message: Message):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —É—Å–ª—É–≥—É"""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

    parts = message.text.strip().split(maxsplit=2)
    if len(parts) < 3:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /addservice <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ü–µ–Ω–∞>")

    name = parts[1]
    try:
        price = int(parts[2])
    except ValueError:
        return await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")

    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT id FROM services WHERE LOWER(name)=LOWER(?)", (name,))
        row = await cur.fetchone()
        if row:
            return await message.answer(f"–£—Å–ª—É–≥–∞ '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚ùå")

        await db.execute("INSERT INTO services(name, price) VALUES (?, ?)", (name, price))
        await db.commit()

    await message.answer(f"‚úÖ –£—Å–ª—É–≥–∞ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞. –¶–µ–Ω–∞: {price} ‚ÇΩ")


@router.message(Command("delservice"))
async def delete_service(message: Message):
    """–£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É"""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

    parts = message.text.strip().split(maxsplit=1)
    if len(parts) < 2:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /delservice <–Ω–∞–∑–≤–∞–Ω–∏–µ>")

    name = parts[1]

    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("DELETE FROM services WHERE LOWER(name)=LOWER(?)", (name,))
        await db.commit()

        if cur.rowcount == 0:
            return await message.answer(f"–£—Å–ª—É–≥–∞ '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚ùå")

    await message.answer(f"‚úÖ –£—Å–ª—É–≥–∞ '{name}' —É–¥–∞–ª–µ–Ω–∞")


@router.message(Command("stats"))
async def show_statistics(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_general")],
        [InlineKeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å—ã", callback_data="stats_finance")],
        [InlineKeyboardButton(text="üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏", callback_data="stats_services")],
        [InlineKeyboardButton(text="üìÖ –ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏", callback_data="stats_weekdays")],
        [InlineKeyboardButton(text="üë• –ö–ª–∏–µ–Ω—Ç—ã", callback_data="stats_clients")],
    ])
    
    await message.answer(
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞*\n\n"
        "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
        parse_mode="Markdown",
        reply_markup=kb
    )


@router.callback_query(F.data == "stats_general")
async def stats_general(call: CallbackQuery):
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        # –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π
        cur = await db.execute("SELECT COUNT(*) FROM bookings")
        total_bookings = (await cur.fetchone())[0]
        
        # –ó–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = (datetime.now() - timedelta(days=30)).isoformat()
        cur = await db.execute(
            "SELECT COUNT(*) FROM bookings WHERE created_at >= ?",
            (thirty_days_ago,)
        )
        bookings_30d = (await cur.fetchone())[0]
        
        # –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–ø–∏—Å–∏
        now = datetime.now().isoformat()
        cur = await db.execute("""
            SELECT COUNT(*) FROM bookings b
            JOIN timeslots t ON t.id = b.timeslot_id
            WHERE t.dt > ?
        """, (now,))
        upcoming = (await cur.fetchone())[0]
        
        # –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
        cur = await db.execute("SELECT COUNT(*) FROM users WHERE phone IS NOT NULL")
        total_clients = (await cur.fetchone())[0]
        
        # –°–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
        cur = await db.execute("SELECT COUNT(*) FROM timeslots WHERE is_booked=0 AND dt > ?", (now,))
        free_slots = (await cur.fetchone())[0]
    
    text = (
        "üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: *{total_bookings}*\n"
        f"üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π: *{bookings_30d}*\n"
        f"‚è≠ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö: *{upcoming}*\n\n"
        f"üë• –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: *{total_clients}*\n"
        f"üü¢ –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: *{free_slots}*\n"
    )
    
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="stats_back")
    ]])
    
    await call.message.edit_text(text, parse_mode="Markdown", reply_markup=kb)
    await call.answer()


@router.callback_query(F.data == "stats_finance")
async def stats_finance(call: CallbackQuery):
    """–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        # –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞
        cur = await db.execute("SELECT SUM(total_price) FROM bookings")
        total_revenue = (await cur.fetchone())[0] or 0
        
        # –í—ã—Ä—É—á–∫–∞ –∑–∞ 30 –¥–Ω–µ–π
        thirty_days_ago = (datetime.now() - timedelta(days=30)).isoformat()
        cur = await db.execute(
            "SELECT SUM(total_price) FROM bookings WHERE created_at >= ?",
            (thirty_days_ago,)
        )
        revenue_30d = (await cur.fetchone())[0] or 0
        
        # –í—ã—Ä—É—á–∫–∞ –∑–∞ 7 –¥–Ω–µ–π
        seven_days_ago = (datetime.now() - timedelta(days=7)).isoformat()
        cur = await db.execute(
            "SELECT SUM(total_price) FROM bookings WHERE created_at >= ?",
            (seven_days_ago,)
        )
        revenue_7d = (await cur.fetchone())[0] or 0
        
        # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫
        cur = await db.execute("SELECT AVG(total_price) FROM bookings")
        avg_check = (await cur.fetchone())[0] or 0
        
        # –ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è –≤—ã—Ä—É—á–∫–∞
        now = datetime.now().isoformat()
        cur = await db.execute("""
            SELECT SUM(b.total_price) FROM bookings b
            JOIN timeslots t ON t.id = b.timeslot_id
            WHERE t.dt > ?
        """, (now,))
        upcoming_revenue = (await cur.fetchone())[0] or 0
    
    text = (
        "üí∞ *–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"üíµ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: *{total_revenue:,.0f} ‚ÇΩ*\n"
        f"üìä –ó–∞ 30 –¥–Ω–µ–π: *{revenue_30d:,.0f} ‚ÇΩ*\n"
        f"üìä –ó–∞ 7 –¥–Ω–µ–π: *{revenue_7d:,.0f} ‚ÇΩ*\n\n"
        f"üí≥ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: *{avg_check:,.0f} ‚ÇΩ*\n"
        f"‚è≠ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è: *{upcoming_revenue:,.0f} ‚ÇΩ*\n"
    )
    
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="stats_back")
    ]])
    
    await call.message.edit_text(text, parse_mode="Markdown", reply_markup=kb)
    await call.answer()


@router.callback_query(F.data == "stats_services")
async def stats_services(call: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Å–ª—É–≥–∞–º"""
    async with aiosqlite.connect(DB_PATH) as db:
        # –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Å–≤—è–∑–∏ –º–Ω–æ–≥–∏–µ-–∫–æ-–º–Ω–æ–≥–∏–º –º–µ–∂–¥—É bookings –∏ services
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        cur = await db.execute("""
            SELECT s.name, s.price, COUNT(*) as cnt
            FROM services s
            GROUP BY s.id
            ORDER BY s.price DESC
            LIMIT 10
        """)
        services = await cur.fetchall()
    
    text = "üî• *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏*\n\n"
    
    if not services:
        text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    else:
        for name, price, _ in services:
            text += f"‚Ä¢ {name} ‚Äî {price} ‚ÇΩ\n"
    
    text += "\n_–ü–æ–ª–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —É—Å–ª—É–≥–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∏ bookings‚Üîservices_"
    
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="stats_back")
    ]])
    
    await call.message.edit_text(text, parse_mode="Markdown", reply_markup=kb)
    await call.answer()


@router.callback_query(F.data == "stats_weekdays")
async def stats_weekdays(call: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏"""
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("""
            SELECT 
                CAST(strftime('%w', t.dt) AS INTEGER) as dow,
                COUNT(*) as cnt,
                SUM(b.total_price) as revenue
            FROM bookings b
            JOIN timeslots t ON t.id = b.timeslot_id
            GROUP BY dow
            ORDER BY dow
        """)
        days_data = await cur.fetchall()
    
    weekdays = {
        0: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
        1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        2: "–í—Ç–æ—Ä–Ω–∏–∫",
        3: "–°—Ä–µ–¥–∞",
        4: "–ß–µ—Ç–≤–µ—Ä–≥",
        5: "–ü—è—Ç–Ω–∏—Ü–∞",
        6: "–°—É–±–±–æ—Ç–∞"
    }
    
    text = "üìÖ *–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏*\n\n"
    
    if not days_data:
        text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    else:
        for dow, cnt, revenue in days_data:
            day_name = weekdays.get(dow, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            text += f"*{day_name}:* {cnt} –∑–∞–ø–∏—Å–µ–π, {revenue or 0:,.0f} ‚ÇΩ\n"
    
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="stats_back")
    ]])
    
    await call.message.edit_text(text, parse_mode="Markdown", reply_markup=kb)
    await call.answer()


@router.callback_query(F.data == "stats_clients")
async def stats_clients(call: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º"""
    async with aiosqlite.connect(DB_PATH) as db:
        # –¢–û–ü –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø–∏—Å–µ–π
        cur = await db.execute("""
            SELECT u.name, COUNT(*) as visits, SUM(b.total_price) as spent
            FROM bookings b
            JOIN users u ON u.id = b.user_id
            GROUP BY u.id
            ORDER BY visits DESC
            LIMIT 10
        """)
        top_clients = await cur.fetchall()
    
    text = "üë• *–¢–û–ü-10 –∫–ª–∏–µ–Ω—Ç–æ–≤*\n\n"
    
    if not top_clients:
        text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    else:
        for i, (name, visits, spent) in enumerate(top_clients, 1):
            text += f"{i}. {name}: {visits} –≤–∏–∑–∏—Ç–æ–≤, {spent:,.0f} ‚ÇΩ\n"
    
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="stats_back")
    ]])
    
    await call.message.edit_text(text, parse_mode="Markdown", reply_markup=kb)
    await call.answer()


@router.callback_query(F.data == "stats_back")
async def stats_back(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_general")],
        [InlineKeyboardButton(text="üí∞ –§–∏–Ω–∞–Ω—Å—ã", callback_data="stats_finance")],
        [InlineKeyboardButton(text="üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏", callback_data="stats_services")],
        [InlineKeyboardButton(text="üìÖ –ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏", callback_data="stats_weekdays")],
        [InlineKeyboardButton(text="üë• –ö–ª–∏–µ–Ω—Ç—ã", callback_data="stats_clients")],
    ])
    
    await call.message.edit_text(
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞*\n\n"
        "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
        parse_mode="Markdown",
        reply_markup=kb
    )
    await call.answer()