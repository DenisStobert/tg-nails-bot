import logging
import aiosqlite
from datetime import datetime
from typing import Dict, Set
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

from config import DB_PATH, ADMIN_ID
from keyboards.main_menu import main_menu_kb
from keyboards.services import render_services_keyboard
from utils.calendar import build_calendar

router = Router()

# –ü–∞–º—è—Ç—å –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥ –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
pending: Dict[int, dict] = {}


@router.message(Command("book"))
@router.message(F.text.startswith("üìÖ"))
async def start_booking(message: Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏"""
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT phone FROM users WHERE tg_id=?", (message.from_user.id,))
        row = await cur.fetchone()

    if not row or not row[0]:
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
            resize_keyboard=True
        )
        return await message.answer("–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω—É–∂–µ–Ω —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    await show_calendar(message)


async def show_calendar(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    today = datetime.now()
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:",
        reply_markup=await build_calendar(today.year, today.month)
    )


@router.callback_query(F.data.startswith("pick_date:"))
async def pick_date(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    date_str = call.data.split(":")[1]
    date_obj = datetime.fromisoformat(date_str).date()

    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "SELECT id, dt FROM timeslots WHERE is_booked=0 AND date(dt)=? ORDER BY dt",
            (date_obj.isoformat(),)
        )
        rows = await cur.fetchall()

    if not rows:
        await call.answer("–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–∫–æ–Ω üòî", show_alert=True)
        return

    kb_rows = []
    for sid, dt in rows:
        t = datetime.fromisoformat(dt).strftime("%H:%M")
        kb_rows.append([
            InlineKeyboardButton(
                text=t,
                callback_data=f"slot:{sid}"
            )
        ])

    kb_rows.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_calendar")
    ])

    await call.message.edit_text(
        f"üìÖ {date_obj.strftime('%d.%m.%Y')}\n–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb_rows)
    )
    await call.answer()


@router.callback_query(F.data.startswith("slot:"))
async def choose_slot(call: CallbackQuery):
    """–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞"""
    slot_id = int(call.data.split(":")[1])
    user_id = call.from_user.id
    
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT dt FROM timeslots WHERE id=?", (slot_id,))
        row = await cur.fetchone()
        slot_dt = datetime.fromisoformat(row[0])
    
    pending[user_id] = {
        "slot_id": slot_id,
        "services": set(),
        "date": slot_dt.date().isoformat()
    }

    # –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥–∏
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT id, name, price FROM services ORDER BY id")
        services = await cur.fetchall()

    kb_rows = []
    for sid, name, price in services:
        kb_rows.append([
            InlineKeyboardButton(
                text=f"‚ñ´Ô∏è {name} ({price} ‚ÇΩ)",
                callback_data=f"toggle:{sid}"
            )
        ])
    kb_rows.append([
        InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    ])
    
    await call.message.edit_text(
        "–û—Ç–º–µ—Ç—å –Ω—É–∂–Ω—ã–µ —É—Å–ª—É–≥–∏ (–Ω–∞–∂–∏–º–∞–π –ø–æ –ø—É–Ω–∫—Ç–∞–º), –∑–∞—Ç–µ–º –∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb_rows)
    )
    await call.answer()


@router.callback_query(F.data.startswith("toggle:"))
async def toggle_service(call: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏"""
    user_id = call.from_user.id
    svc_id = int(call.data.split(":")[1])

    state = pending.get(user_id)
    if not state:
        await call.answer("–ù–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞: /book", show_alert=True)
        return

    selected: Set[int] = state["services"]
    if svc_id in selected:
        selected.remove(svc_id)
    else:
        selected.add(svc_id)

    text, kb, _ = await render_services_keyboard(selected)
    await call.message.edit_text(text, parse_mode="Markdown", reply_markup=kb)
    await call.answer()


@router.callback_query(F.data == "done")
async def finalize_services(call: CallbackQuery):
    """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥ –∏ –ø–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    user_id = call.from_user.id
    state = pending.get(user_id)
    if not state:
        await call.answer("–ù–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞: /book", show_alert=True)
        return

    selected: Set[int] = state["services"]
    if not selected:
        await call.answer("–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —É—Å–ª—É–≥—É üôè", show_alert=True)
        return

    # –ü–æ—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É
    async with aiosqlite.connect(DB_PATH) as db:
        q_marks = ",".join("?" * len(selected))
        cur = await db.execute(f"SELECT name, price FROM services WHERE id IN ({q_marks})", tuple(selected))
        rows = await cur.fetchall()

    total = sum(price for _, price in rows)
    services_list = "\n".join([f"‚Ä¢ {name}" for name, _ in rows])

    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_services"),
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
    ]])
    
    await call.message.edit_text(
        f"*–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞:*\n{services_list}\n\n–ò—Ç–æ–≥–æ: *{total} ‚ÇΩ*\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å?",
        parse_mode="Markdown",
        reply_markup=kb
    )
    await call.answer()


@router.callback_query(F.data == "confirm")
async def confirm_booking(call: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    user_id = call.from_user.id
    state = pending.get(user_id)
    if not state:
        await call.answer("–ù–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞: /book", show_alert=True)
        return

    slot_id = state["slot_id"]
    selected: Set[int] = state["services"]

    async with aiosqlite.connect(DB_PATH) as db:
        # –°—É–º–º–∞
        q_marks = ",".join("?" * len(selected))
        cur = await db.execute(f"SELECT price FROM services WHERE id IN ({q_marks})", tuple(selected))
        total = sum(r[0] for r in await cur.fetchall())

        # –ü–æ–ª—É—á–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cur = await db.execute("SELECT id FROM users WHERE tg_id=?", (user_id,))
        row = await cur.fetchone()
        if row:
            uid = row[0]
        else:
            await db.execute("INSERT INTO users(tg_id) VALUES (?)", (user_id,))
            await db.commit()
            cur = await db.execute("SELECT id FROM users WHERE tg_id=?", (user_id,))
            uid = (await cur.fetchone())[0]

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞
        cur = await db.execute("SELECT dt, is_booked FROM timeslots WHERE id=?", (slot_id,))
        slot = await cur.fetchone()
        if not slot:
            await call.answer("–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω üòï", show_alert=True)
            return
        dt_str, is_booked = slot
        if is_booked:
            await call.answer("–£–≤—ã, —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π.", show_alert=True)
            return

        # –ó–∞–Ω—è—Ç—å —Å–ª–æ—Ç –∏ —Å–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω—å
        await db.execute("UPDATE timeslots SET is_booked=1, booked_by_user_id=? WHERE id=?", (uid, slot_id))
        await db.execute(
            "INSERT INTO bookings(user_id, timeslot_id, total_price, created_at) VALUES (?, ?, ?, ?)",
            (uid, slot_id, total, datetime.utcnow().isoformat())
        )
        await db.commit()

    pending.pop(user_id, None)

    when = datetime.fromisoformat(dt_str).strftime("%d.%m %H:%M")
    await call.message.edit_text(
        f"–ì–æ—Ç–æ–≤–æ! –¢—ã –∑–∞–ø–∏—Å–∞–Ω(–∞) –Ω–∞ *{when}*.\n–°—É–º–º–∞: *{total} ‚ÇΩ*",
        parse_mode="Markdown"
    )

    # –£–≤–µ–¥–æ–º–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞
    try:
        bot = call.bot
        await bot.send_message(
            ADMIN_ID,
            f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {call.from_user.full_name} –Ω–∞ {when}, —Å—É–º–º–∞ {total} ‚ÇΩ"
        )
    except Exception as e:
        logging.warning(f"Cannot notify admin: {e}")

    await call.answer()


@router.message(Command("my"))
@router.message(F.text.startswith("üëÄ"))
async def my_bookings(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–ø–∏—Å–∏"""
    user_id = message.from_user.id

    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT id FROM users WHERE tg_id=?", (user_id,))
        row = await cur.fetchone()
        if not row:
            return await message.answer("–ü–æ–∫–∞ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")

        uid = row[0]
        cur = await db.execute("""
            SELECT b.id, t.dt, b.total_price
            FROM bookings b
            JOIN timeslots t ON t.id = b.timeslot_id
            WHERE b.user_id=?
            ORDER BY t.dt DESC
        """, (uid,))
        rows = await cur.fetchall()

    if not rows:
        return await message.answer("–ü–æ–∫–∞ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")

    for bid, dt_str, total in rows:
        dt = datetime.fromisoformat(dt_str).strftime("%d.%m %H:%M")
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"cancel_booking:{bid}")]
        ])
        await message.answer(
            f"*–ó–∞–ø–∏—Å—å:* {dt}\nüí∞ {total} ‚ÇΩ",
            parse_mode="Markdown",
            reply_markup=kb
        )


@router.callback_query(F.data.startswith("cancel_booking:"))
async def cancel_booking(call: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏"""
    booking_id = int(call.data.split(":")[1])

    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT timeslot_id FROM bookings WHERE id=?", (booking_id,))
        row = await cur.fetchone()
        if not row:
            return await call.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚ùå", show_alert=True)
        slot_id = row[0]

        await db.execute("DELETE FROM bookings WHERE id=?", (booking_id,))
        await db.execute(
            "UPDATE timeslots SET is_booked=0, booked_by_user_id=NULL WHERE id=?",
            (slot_id,)
        )
        await db.commit()

    await call.message.edit_text("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
    await call.answer()

    # –£–≤–µ–¥–æ–º–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞
    try:
        bot = call.bot
        await bot.send_message(
            ADMIN_ID,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.full_name} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å #{booking_id}"
        )
    except Exception as e:
        logging.warning(f"Cannot notify admin: {e}")


@router.callback_query(F.data.startswith("reschedule:"))
async def reschedule_booking(call: CallbackQuery):
    """–ü–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏"""
    booking_id = int(call.data.split(":")[1])

    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("""
            SELECT b.user_id, b.timeslot_id
            FROM bookings b
            WHERE b.id = ?
        """, (booking_id,))
        row = await cur.fetchone()

        if not row:
            return await call.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚ùå", show_alert=True)

        user_id, old_slot_id = row

        cur = await db.execute("""
            SELECT id, dt FROM timeslots
            WHERE is_booked = 0
            ORDER BY dt ASC
            LIMIT 10
        """)
        slots = await cur.fetchall()

    if not slots:
        return await call.message.edit_text("üòï –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

    kb_rows = []
    for sid, dt_str in slots:
        dt = datetime.fromisoformat(dt_str)
        kb_rows.append([
            InlineKeyboardButton(
                text=dt.strftime("%d.%m %H:%M"),
                callback_data=f"confirm_reschedule:{booking_id}:{sid}"
            )
        ])
    kb_rows.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reschedule")])

    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Å–ª–æ—Ç –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb_rows)
    )
    await call.answer()


@router.callback_query(F.data.startswith("confirm_reschedule:"))
async def confirm_reschedule(call: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞"""
    _, booking_id_str, new_slot_id_str = call.data.split(":")
    booking_id = int(booking_id_str)
    new_slot_id = int(new_slot_id_str)

    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT timeslot_id FROM bookings WHERE id=?", (booking_id,))
        row = await cur.fetchone()
        if not row:
            return await call.answer("–ë—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚ùå", show_alert=True)
        old_slot_id = row[0]

        cur = await db.execute("SELECT dt, is_booked FROM timeslots WHERE id=?", (new_slot_id,))
        slot = await cur.fetchone()
        if not slot or slot[1]:
            return await call.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç üòï", show_alert=True)

        await db.execute("UPDATE timeslots SET is_booked=0, booked_by_user_id=NULL WHERE id=?", (old_slot_id,))
        await db.execute(
            "UPDATE timeslots SET is_booked=1, booked_by_user_id=(SELECT user_id FROM bookings WHERE id=?) WHERE id=?",
            (booking_id, new_slot_id)
        )
        await db.execute("UPDATE bookings SET timeslot_id=?, reminded12=0 WHERE id=?", (new_slot_id, booking_id))
        await db.commit()

        cur = await db.execute("SELECT dt FROM timeslots WHERE id=?", (new_slot_id,))
        new_dt = datetime.fromisoformat((await cur.fetchone())[0])

    await call.message.edit_text(f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ {new_dt.strftime('%d.%m %H:%M')}!")

    try:
        bot = call.bot
        await bot.send_message(
            ADMIN_ID,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.full_name} –ø–µ—Ä–µ–Ω—ë—Å –∑–∞–ø–∏—Å—å #{booking_id} –Ω–∞ {new_dt.strftime('%d.%m %H:%M')}"
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞: {e}")

    await call.answer()


@router.callback_query(F.data == "cancel_reschedule")
async def cancel_reschedule(call: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞"""
    await call.message.edit_text("–ü–µ—Ä–µ–Ω–æ—Å –æ—Ç–º–µ–Ω—ë–Ω ‚úÖ")
    await call.answer()


@router.callback_query(F.data == "cancel")
async def cancel_flow(call: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    pending.pop(call.from_user.id, None)
    await call.message.edit_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /book")
    await call.answer()


@router.callback_query(F.data == "back_to_calendar")
async def back_to_calendar(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é"""
    today = datetime.now()
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:",
        reply_markup=await build_calendar(today.year, today.month)
    )
    await call.answer()


@router.callback_query(F.data == "back_to_slots")
async def back_to_slots(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å–ª–æ—Ç–æ–≤"""
    state = pending.get(call.from_user.id)
    if not state or "date" not in state:
        return await call.answer("–ù–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞: /book", show_alert=True)

    date_str = state["date"]

    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "SELECT id, dt FROM timeslots WHERE is_booked=0 AND date(dt)=? ORDER BY dt",
            (date_str,)
        )
        rows = await cur.fetchall()

    if not rows:
        await call.message.edit_text("–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–∫–æ–Ω üòî")
        return

    kb_rows = []
    for sid, dt in rows:
        t = datetime.fromisoformat(dt).strftime("%H:%M")
        kb_rows.append([InlineKeyboardButton(text=t, callback_data=f"slot:{sid}")])

    kb_rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_calendar")])

    await call.message.edit_text(
        f"üìÖ {date_str}\n–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb_rows)
    )
    await call.answer()


@router.callback_query(F.data == "back_to_services")
async def back_to_services(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥"""
    state = pending.get(call.from_user.id)
    if not state:
        return await call.answer("–ù–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞: /book", show_alert=True)

    selected: Set[int] = state["services"]
    text, kb, _ = await render_services_keyboard(selected)
    await call.message.edit_text(text, parse_mode="Markdown", reply_markup=kb)
    await call.answer()


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await call.message.delete()
    await call.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_kb()
    )
    await call.answer()


@router.callback_query(F.data.startswith("prev_month:"))
async def prev_month(call: CallbackQuery):
    """–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
    year, month = map(int, call.data.split(":")[1].split("-"))
    if month == 1:
        year -= 1
        month = 12
    else:
        month -= 1

    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:",
        reply_markup=await build_calendar(year, month)
    )
    await call.answer()


@router.callback_query(F.data.startswith("next_month:"))
async def next_month(call: CallbackQuery):
    """–°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
    year, month = map(int, call.data.split(":")[1].split("-"))
    if month == 12:
        year += 1
        month = 1
    else:
        month += 1

    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:",
        reply_markup=await build_calendar(year, month)
    )
    await call.answer()


@router.callback_query(F.data == "ignore")
async def ignore_callback(call: CallbackQuery):
    """–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ callback (–¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Ç.–¥.)"""
    await call.answer()