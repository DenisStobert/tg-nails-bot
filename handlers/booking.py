import logging
import aiosqlite
from datetime import datetime, timedelta
from typing import Dict, Set, List
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

from config import DB_PATH, ADMIN_ID
from keyboards.main_menu import main_menu_kb
from keyboards.services import render_services_keyboard
from utils.calendar import build_calendar

router = Router()

# –ü–∞–º—è—Ç—å –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥ –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
pending: Dict[int, dict] = {}


@router.message(Command("book"))
@router.message(F.text.startswith("üìÖ"))
async def start_booking(message: Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏ - –°–ù–ê–ß–ê–õ–ê –≤—ã–±–æ—Ä —É—Å–ª—É–≥"""
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT phone FROM users WHERE tg_id=?", (message.from_user.id,))
        row = await cur.fetchone()

    if not row or not row[0]:
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
            resize_keyboard=True
        )
        return await message.answer("–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω—É–∂–µ–Ω —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    pending[message.from_user.id] = {"services": set()}
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —É—Å–ª—É–≥
    text, kb, _, _ = await render_services_keyboard(set())
    await message.answer(text, parse_mode="Markdown", reply_markup=kb)


@router.callback_query(F.data.startswith("toggle:"))
async def toggle_service(call: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏"""
    user_id = call.from_user.id
    svc_id = int(call.data.split(":")[1])

    state = pending.get(user_id)
    if not state:
        await call.answer("–ù–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞: /book", show_alert=True)
        return

    selected: Set[int] = state["services"]
    if svc_id in selected:
        selected.remove(svc_id)
    else:
        selected.add(svc_id)

    text, kb, _, _ = await render_services_keyboard(selected)
    await call.message.edit_text(text, parse_mode="Markdown", reply_markup=kb)
    await call.answer()


@router.callback_query(F.data == "services_done")
async def finalize_services(call: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏"""
    user_id = call.from_user.id
    state = pending.get(user_id)
    
    if not state:
        await call.answer("–ù–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞: /book", show_alert=True)
        return

    selected: Set[int] = state["services"]
    if not selected:
        await call.answer("–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —É—Å–ª—É–≥—É üôè", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–∞—Ö
    async with aiosqlite.connect(DB_PATH) as db:
        q_marks = ",".join("?" * len(selected))
        cur = await db.execute(
            f"SELECT name, price, duration_minutes FROM services WHERE id IN ({q_marks})",
            tuple(selected)
        )
        services_data = await cur.fetchall()

    # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
    total_price = sum(price for _, price, _ in services_data)
    total_minutes = sum((duration or 60) for _, _, duration in services_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state["total_price"] = total_price
    state["total_minutes"] = total_minutes
    state["services_data"] = services_data
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    today = datetime.now()
    
    hours = total_minutes // 60
    mins = total_minutes % 60
    time_str = f"{hours}—á {mins}–º–∏–Ω" if hours else f"{mins}–º–∏–Ω"
    
    await call.message.edit_text(
        f"‚úÖ –£—Å–ª—É–≥–∏ –≤—ã–±—Ä–∞–Ω—ã!\n\n"
        f"üí∞ –°—É–º–º–∞: *{total_price} ‚ÇΩ*\n"
        f"‚è± –í—Ä–µ–º—è: *{time_str}*\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É:",
        parse_mode="Markdown",
        reply_markup=await build_calendar(today.year, today.month)
    )
    await call.answer()


async def find_available_slots_for_duration(date_obj, duration_minutes: int) -> List[tuple]:
    """–ù–∞–π—Ç–∏ –≤—Å–µ —Å–ª–æ—Ç—ã –Ω–∞ –¥–∞—Ç—É, –≥–¥–µ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥—Ä—è–¥
    
    Returns:
        List of (start_slot_id, start_dt, slot_ids_needed)
    """
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        cur = await db.execute(
            """SELECT id, dt, is_booked FROM timeslots 
               WHERE date(dt)=? 
               ORDER BY dt""",
            (date_obj.isoformat(),)
        )
        all_slots = await cur.fetchall()
    
    if not all_slots:
        return []
    
    # –°–∫–æ–ª—å–∫–æ —Å–ª–æ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥ –Ω—É–∂–Ω–æ (—Å–ª–æ—Ç—ã –ø–æ 60 –º–∏–Ω—É—Ç)
    slots_needed = (duration_minutes + 59) // 60  # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
    
    available_sequences = []
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —Å–≤–æ–±–æ–¥–Ω–æ–º—É —Å–ª–æ—Ç—É
    for i, (slot_id, dt_str, is_booked) in enumerate(all_slots):
        # –ï—Å–ª–∏ —Å–ª–æ—Ç –∑–∞–Ω—è—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if is_booked:
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–ª–æ—Ç–∞ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ—Ç–æ–≤ (–∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏)
        # –ù–∞–ø—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –Ω—É–∂–Ω–æ 2 —á–∞—Å–∞, –∞ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–æ—Ç –¥–Ω—è - –Ω–µ–ª—å–∑—è
        remaining_slots = len(all_slots) - i
        if remaining_slots < slots_needed:
            # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ—Ç–æ–≤ –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
            continue
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å —ç—Ç–æ–≥–æ —Å–ª–æ—Ç–∞
        start_dt = datetime.fromisoformat(dt_str)
        sequence = [slot_id]
        current_dt = start_dt
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –°–í–û–ë–û–î–ù–´–• —Å–ª–æ—Ç–æ–≤
        for j in range(i + 1, len(all_slots)):
            next_slot_id, next_dt_str, next_is_booked = all_slots[j]
            next_dt = datetime.fromisoformat(next_dt_str)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–ª–æ—Ç —Ä–æ–≤–Ω–æ —á–µ—Ä–µ–∑ 1 —á–∞—Å
            expected_dt = current_dt + timedelta(hours=1)
            
            if next_dt != expected_dt:
                # –ï—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫ –≤ —Å–ª–æ—Ç–∞—Ö - –Ω–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Å—Ç–∞—Ä—Ç
                break
            
            if next_is_booked:
                # –°–ª–µ–¥—É—é—â–∏–π —Å–ª–æ—Ç –∑–∞–Ω—è—Ç - –Ω–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Å—Ç–∞—Ä—Ç
                break
            
            # –°–ª–æ—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç
            sequence.append(next_slot_id)
            current_dt = next_dt
            
            # –ï—Å–ª–∏ —Å–æ–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ—Ç–æ–≤ - –≤—Å—ë, –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –æ–∫–Ω–æ
            if len(sequence) >= slots_needed:
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ—Ç–æ–≤
        if len(sequence) >= slots_needed:
            # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤
            final_sequence = sequence[:slots_needed]
            available_sequences.append((slot_id, dt_str, final_sequence))
    
    return available_sequences


@router.callback_query(F.data.startswith("pick_date:"))
async def pick_date(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ª–æ—Ç—ã"""
    user_id = call.from_user.id
    state = pending.get(user_id)
    
    if not state or "total_minutes" not in state:
        await call.answer("–ù–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞: /book", show_alert=True)
        return
    
    date_str = call.data.split(":")[1]
    date_obj = datetime.fromisoformat(date_str).date()
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ª–æ—Ç—ã
    duration_minutes = state["total_minutes"]
    available_slots = await find_available_slots_for_duration(date_obj, duration_minutes)
    
    if not available_slots:
        await call.answer(
            f"üòî –ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç –æ–∫–æ–Ω —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º ({duration_minutes}–º–∏–Ω).\n"
            f"–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å.",
            show_alert=True
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    kb_rows = []
    for start_slot_id, start_dt, slot_ids in available_slots:
        dt = datetime.fromisoformat(start_dt)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏
        end_dt = dt + timedelta(minutes=duration_minutes)
        time_range = f"{dt.strftime('%H:%M')} - {end_dt.strftime('%H:%M')}"
        
        kb_rows.append([
            InlineKeyboardButton(
                text=time_range,
                callback_data=f"slotrange:{start_slot_id}:{','.join(map(str, slot_ids))}"
            )
        ])
    
    kb_rows.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data="back_to_calendar"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥–∏", callback_data="back_to_services_choice")
    ])
    
    await call.message.edit_text(
        f"üìÖ *{date_obj.strftime('%d.%m.%Y')}*\n"
        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: *{duration_minutes}–º–∏–Ω*\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–∫–Ω–∞:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb_rows)
    )
    await call.answer()


@router.callback_query(F.data.startswith("slotrange:"))
async def confirm_slot_range(call: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å–ª–æ—Ç–æ–≤"""
    user_id = call.from_user.id
    state = pending.get(user_id)
    
    if not state:
        await call.answer("–ù–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞: /book", show_alert=True)
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    parts = call.data.split(":", 2)
    start_slot_id = int(parts[1])
    slot_ids = list(map(int, parts[2].split(",")))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state["start_slot_id"] = start_slot_id
    state["slot_ids"] = slot_ids
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT dt FROM timeslots WHERE id=?", (start_slot_id,))
        row = await cur.fetchone()
        start_dt = datetime.fromisoformat(row[0])
    
    end_dt = start_dt + timedelta(minutes=state["total_minutes"])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
    services_list = "\n".join([f"‚Ä¢ {name}" for name, _, _ in state["services_data"]])
    
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"pick_date:{start_dt.date().isoformat()}"),
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_booking"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
    ]])
    
    await call.message.edit_text(
        f"*–ü—Ä–æ–≤–µ—Ä—å –∑–∞–ø–∏—Å—å:*\n\n"
        f"üìÖ {start_dt.strftime('%d.%m.%Y')}\n"
        f"‚è∞ {start_dt.strftime('%H:%M')} - {end_dt.strftime('%H:%M')}\n\n"
        f"*–£—Å–ª—É–≥–∏:*\n{services_list}\n\n"
        f"üí∞ –ò—Ç–æ–≥–æ: *{state['total_price']} ‚ÇΩ*\n\n"
        f"–í—Å—ë –≤–µ—Ä–Ω–æ?",
        parse_mode="Markdown",
        reply_markup=kb
    )
    await call.answer()


@router.callback_query(F.data == "confirm_booking")
async def confirm_booking(call: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    user_id = call.from_user.id
    state = pending.get(user_id)
    
    if not state or "slot_ids" not in state:
        await call.answer("–ù–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞: /book", show_alert=True)
        return

    slot_ids = state["slot_ids"]
    total_price = state["total_price"]
    
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü–æ–ª—É—á–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cur = await db.execute("SELECT id FROM users WHERE tg_id=?", (user_id,))
        row = await cur.fetchone()
        if row:
            uid = row[0]
        else:
            await db.execute("INSERT INTO users(tg_id) VALUES (?)", (user_id,))
            await db.commit()
            cur = await db.execute("SELECT id FROM users WHERE tg_id=?", (user_id,))
            uid = (await cur.fetchone())[0]

        # üîí –ê–¢–û–ú–ê–†–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –°–õ–û–¢–û–í
        try:
            await db.execute("BEGIN IMMEDIATE")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã –ï–©–Å –†–ê–ó
            placeholders = ",".join("?" * len(slot_ids))
            cur = await db.execute(
                f"SELECT id, dt, is_booked FROM timeslots WHERE id IN ({placeholders})",
                slot_ids
            )
            slots = await cur.fetchall()
            
            if len(slots) != len(slot_ids):
                await db.rollback()
                await call.answer("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòï", show_alert=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –í–°–ï —Å–ª–æ—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã
            for slot_id, dt_str, is_booked in slots:
                if is_booked:
                    await db.rollback()
                    await call.answer(
                        "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–¥–∏–Ω –∏–∑ —Å–ª–æ—Ç–æ–≤ —É–∂–µ –∑–∞–Ω—è—Ç.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.",
                        show_alert=True
                    )
                    return
            
            # –í—Å—ë –æ–∫, –∑–∞–Ω–∏–º–∞–µ–º –í–°–ï —Å–ª–æ—Ç—ã –∞—Ç–æ–º–∞—Ä–Ω–æ
            for slot_id in slot_ids:
                await db.execute(
                    "UPDATE timeslots SET is_booked=1, booked_by_user_id=? WHERE id=?",
                    (uid, slot_id)
                )
            
            # –°–æ–∑–¥–∞—ë–º –±—Ä–æ–Ω—å (–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –ø–µ—Ä–≤–æ–º—É —Å–ª–æ—Ç—É)
            start_slot_id = slot_ids[0]
            await db.execute(
                "INSERT INTO bookings(user_id, timeslot_id, total_price, created_at) VALUES (?, ?, ?, ?)",
                (uid, start_slot_id, total_price, datetime.utcnow().isoformat())
            )
            
            await db.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            first_dt_str = slots[0][1]
            
        except Exception as e:
            await db.rollback()
            logging.error(f"Booking error: {e}")
            await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", show_alert=True)
            return

    pending.pop(user_id, None)

    start_dt = datetime.fromisoformat(first_dt_str)
    end_dt = start_dt + timedelta(minutes=state["total_minutes"])
    when = f"{start_dt.strftime('%d.%m %H:%M')} - {end_dt.strftime('%H:%M')}"
    
    await call.message.edit_text(
        f"‚úÖ *–û—Ç–ª–∏—á–Ω–æ!*\n\n"
        f"–¢—ã –∑–∞–ø–∏—Å–∞–Ω(–∞) –Ω–∞:\n"
        f"üìÖ {start_dt.strftime('%d.%m.%Y')}\n"
        f"‚è∞ {when}\n"
        f"üí∞ {total_price} ‚ÇΩ\n\n"
        f"–ñ–¥—É —Ç–µ–±—è! üíÖ",
        parse_mode="Markdown"
    )

    # –£–≤–µ–¥–æ–º–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞
    try:
        services_list = "\n".join([f"‚Ä¢ {name}" for name, _, _ in state["services_data"]])
        await call.bot.send_message(
            ADMIN_ID,
            f"üÜï *–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!*\n\n"
            f"üë§ {call.from_user.full_name}\n"
            f"üìÖ {start_dt.strftime('%d.%m.%Y')}\n"
            f"‚è∞ {when}\n\n"
            f"–£—Å–ª—É–≥–∏:\n{services_list}\n\n"
            f"üí∞ {total_price} ‚ÇΩ",
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.warning(f"Cannot notify admin: {e}")

    await call.answer("‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞!")


@router.message(Command("my"))
@router.message(F.text.startswith("üëÄ"))
async def my_bookings(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–ø–∏—Å–∏"""
    user_id = message.from_user.id

    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT id FROM users WHERE tg_id=?", (user_id,))
        row = await cur.fetchone()
        if not row:
            return await message.answer("–ü–æ–∫–∞ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")

        uid = row[0]
        cur = await db.execute("""
            SELECT b.id, t.dt, b.total_price
            FROM bookings b
            JOIN timeslots t ON t.id = b.timeslot_id
            WHERE b.user_id=?
            ORDER BY t.dt DESC
        """, (uid,))
        rows = await cur.fetchall()

    if not rows:
        return await message.answer("–ü–æ–∫–∞ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.")

    for bid, dt_str, total in rows:
        dt = datetime.fromisoformat(dt_str).strftime("%d.%m %H:%M")
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"cancel_booking:{bid}")]
        ])
        await message.answer(
            f"*–ó–∞–ø–∏—Å—å:* {dt}\nüí∞ {total} ‚ÇΩ",
            parse_mode="Markdown",
            reply_markup=kb
        )


@router.callback_query(F.data.startswith("cancel_booking:"))
async def cancel_booking(call: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ - –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –í–°–ï —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã"""
    booking_id = int(call.data.split(":")[1])

    async with aiosqlite.connect(DB_PATH) as db:
        try:
            await db.execute("BEGIN IMMEDIATE")
            
            # –ù–∞—Ö–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ—Ç
            cur = await db.execute("SELECT timeslot_id FROM bookings WHERE id=?", (booking_id,))
            row = await cur.fetchone()
            if not row:
                await db.rollback()
                return await call.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚ùå", show_alert=True)
            main_slot_id = row[0]
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–ª–æ—Ç—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π –∑–∞–ø–∏—Å—å—é
            # (–≤—Å–µ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–µ —Å–ª–æ—Ç—ã –æ—Ç –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏)
            cur = await db.execute("""
                SELECT u.id FROM users WHERE tg_id=?
            """, (call.from_user.id,))
            user_row = await cur.fetchone()
            if not user_row:
                await db.rollback()
                return await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            user_db_id = user_row[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
            cur = await db.execute("SELECT dt FROM timeslots WHERE id=?", (main_slot_id,))
            main_dt_str = (await cur.fetchone())[0]
            main_dt = datetime.fromisoformat(main_dt_str)
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–ª–æ—Ç—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞—á–∏–Ω–∞—è —Å —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            cur = await db.execute("""
                SELECT id, dt FROM timeslots 
                WHERE booked_by_user_id=? AND dt >= ?
                ORDER BY dt
            """, (user_db_id, main_dt_str))
            user_slots = await cur.fetchall()
            
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã
            slots_to_free = [main_slot_id]
            for i, (slot_id, dt_str) in enumerate(user_slots):
                if slot_id == main_slot_id:
                    continue
                dt = datetime.fromisoformat(dt_str)
                expected_dt = main_dt + timedelta(hours=len(slots_to_free))
                if dt == expected_dt:
                    slots_to_free.append(slot_id)
                else:
                    break
            
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
            placeholders = ",".join("?" * len(slots_to_free))
            await db.execute(
                f"UPDATE timeslots SET is_booked=0, booked_by_user_id=NULL WHERE id IN ({placeholders})",
                slots_to_free
            )
            
            # –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω—å
            await db.execute("DELETE FROM bookings WHERE id=?", (booking_id,))
            
            await db.commit()
            
        except Exception as e:
            await db.rollback()
            logging.error(f"Cancel booking error: {e}")
            return await call.answer("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã", show_alert=True)

    await call.message.edit_text("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!")
    await call.answer()

    # –£–≤–µ–¥–æ–º–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞
    try:
        await call.bot.send_message(
            ADMIN_ID,
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.full_name} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å #{booking_id}"
        )
    except Exception as e:
        logging.warning(f"Cannot notify admin: {e}")


@router.callback_query(F.data.startswith("reschedule:"))
async def reschedule_booking(call: CallbackQuery):
    """–ü–µ—Ä–µ–Ω–æ—Å –∑–∞–ø–∏—Å–∏"""
    booking_id = int(call.data.split(":")[1])
    
    await call.message.edit_text(
        "–î–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–∏:\n"
        "1. –û—Ç–º–µ–Ω–∏ —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å\n"
        "2. –°–æ–∑–¥–∞–π –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å: /book\n\n"
        "–≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —á—Ç–æ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö —É—Å–ª—É–≥ üòä"
    )
    await call.answer()


@router.callback_query(F.data == "cancel")
async def cancel_flow(call: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    pending.pop(call.from_user.id, None)
    await call.message.edit_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /book")
    await call.answer()


@router.callback_query(F.data == "back_to_calendar")
async def back_to_calendar(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é"""
    user_id = call.from_user.id  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û
    state = pending.get(user_id)
    
    if not state:
        await call.answer("–ù–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞: /book", show_alert=True)
        return
    
    today = datetime.now()
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:",
        reply_markup=await build_calendar(today.year, today.month)
    )
    await call.answer()


@router.callback_query(F.data == "back_to_services_choice")
async def back_to_services_choice(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥"""
    user_id = call.from_user.id
    state = pending.get(user_id)
    
    if not state:
        await call.answer("–ù–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞: /book", show_alert=True)
        return
    
    selected: Set[int] = state.get("services", set())
    text, kb, _, _ = await render_services_keyboard(selected)
    await call.message.edit_text(text, parse_mode="Markdown", reply_markup=kb)
    await call.answer()


@router.callback_query(F.data.startswith("prev_month:"))
async def prev_month(call: CallbackQuery):
    """–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
    year, month = map(int, call.data.split(":")[1].split("-"))
    if month == 1:
        year -= 1
        month = 12
    else:
        month -= 1

    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:",
        reply_markup=await build_calendar(year, month)
    )
    await call.answer()


@router.callback_query(F.data.startswith("next_month:"))
async def next_month(call: CallbackQuery):
    """–°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
    year, month = map(int, call.data.split(":")[1].split("-"))
    if month == 12:
        year += 1
        month = 1
    else:
        month += 1

    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏ –¥–∞—Ç—É:",
        reply_markup=await build_calendar(year, month)
    )
    await call.answer()


@router.callback_query(F.data == "back_to_menu")
async def back_to_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†"
    )
    await callback.answer()


@router.callback_query(F.data == "ignore")
async def ignore_callback(call: CallbackQuery):
    """–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ callback (–¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Ç.–¥.)"""
    await call.answer()