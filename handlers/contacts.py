import aiosqlite
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

from config import DB_PATH, ADMIN_ID

router = Router()


@router.message(Command("contacts"))
@router.message(Command("about"))
async def show_contacts(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute("SELECT key, value FROM settings WHERE key LIKE 'contact_%'")
        settings = {row[0]: row[1] for row in await cur.fetchall()}
    
    address = settings.get('contact_address', '–ù–µ —É–∫–∞–∑–∞–Ω')
    phone = settings.get('contact_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
    instagram = settings.get('contact_instagram', '')
    hours = settings.get('contact_hours', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')
    map_url = settings.get('contact_map_url', '')
    
    text = (
        "üìç *–ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n"
        f"üè† –ê–¥—Ä–µ—Å: {address}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üïê –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: {hours}\n"
    )
    
    kb_rows = []
    if map_url:
        kb_rows.append([InlineKeyboardButton(text="üó∫ –ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è", url=map_url)])
    if instagram:
        kb_rows.append([InlineKeyboardButton(text="üì∏ Instagram", url=instagram)])
    
    kb = InlineKeyboardMarkup(inline_keyboard=kb_rows) if kb_rows else None
    
    await message.answer(text, parse_mode="Markdown", reply_markup=kb)


@router.message(Command("set_contacts"))
async def set_contacts_start(message: Message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    
    await message.answer(
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤*\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ `/set_address <–∞–¥—Ä–µ—Å>`\n"
        "‚Ä¢ `/set_phone <—Ç–µ–ª–µ—Ñ–æ–Ω>`\n"
        "‚Ä¢ `/set_hours <—á–∞—Å—ã —Ä–∞–±–æ—Ç—ã>`\n"
        "‚Ä¢ `/set_instagram <—Å—Å—ã–ª–∫–∞>`\n"
        "‚Ä¢ `/set_map <—Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—ã>`\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "`/set_address –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞ 15`",
        parse_mode="Markdown"
    )


async def save_setting(key: str, value: str):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)
        """, (key, value))
        await db.commit()


@router.message(Command("set_address"))
async def set_address(message: Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å"""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    
    value = message.text.replace("/set_address", "").strip()
    if not value:
        return await message.answer("–£–∫–∞–∂–∏ –∞–¥—Ä–µ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã")
    
    await save_setting('contact_address', value)
    await message.answer(f"‚úÖ –ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {value}")


@router.message(Command("set_phone"))
async def set_phone(message: Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    
    value = message.text.replace("/set_phone", "").strip()
    if not value:
        return await message.answer("–£–∫–∞–∂–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã")
    
    await save_setting('contact_phone', value)
    await message.answer(f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {value}")


@router.message(Command("set_hours"))
async def set_hours(message: Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã"""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    
    value = message.text.replace("/set_hours", "").strip()
    if not value:
        return await message.answer("–£–∫–∞–∂–∏ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã")
    
    await save_setting('contact_hours', value)
    await message.answer(f"‚úÖ –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {value}")


@router.message(Command("set_instagram"))
async def set_instagram(message: Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Instagram"""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    
    value = message.text.replace("/set_instagram", "").strip()
    if not value:
        return await message.answer("–£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram")
    
    await save_setting('contact_instagram', value)
    await message.answer(f"‚úÖ Instagram —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {value}")


@router.message(Command("set_map"))
async def set_map(message: Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—É"""
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
    
    value = message.text.replace("/set_map", "").strip()
    if not value:
        return await message.answer("–£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—É")
    
    await save_setting('contact_map_url', value)
    await message.answer(f"‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")